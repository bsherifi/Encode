/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication1;

import javax.swing.JOptionPane;
import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;


/**
 *
 * @author betim
 */
public class Encrypt extends javax.swing.JFrame {

    private static String algo = "AES";
    /**
     * Creates new form NewJInternalFrame
     */
    public Encrypt() {
        initComponents();
        jLabel3.setVisible(false);
        jTextArea3.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        zgjedhe = new javax.swing.JComboBox<String>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        jButton1.setText("Kodo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("Teksti");

        jLabel2.setText("Algoritmi per enkodim (zgjedhe)");

        jButton2.setText("Dekodo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("x");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        zgjedhe.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Zgjedh Menyren", "ROT13", "Caesar's Cipher", "A1Z26", "AES265" }));
        zgjedhe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zgjedheActionPerformed(evt);
            }
        });

        jLabel3.setText("Key");

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(zgjedhe, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(370, 370, 370)
                .addComponent(jLabel3)
                .addGap(24, 24, 24))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(423, 423, 423)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(96, 388, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(zgjedhe, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177))
        );

        jMenu1.setText("Enkodimi");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 151, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
    
    KODIMIIIIIIIIIIIIIIIIIIIIIIIII
    
    */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        int x = zgjedhe.getSelectedIndex();
        if(x == 1){
        String fjala = jTextArea1.getText();
        char [] charArray = fjala.toCharArray();
        for(int i = 0; i < fjala.length(); i++){
            if(charArray[i] >= 'a' && charArray[i] <= 'm')
                charArray[i] += (char) 13;
            else if(charArray[i] >= 'A' && charArray[i] <= 'M')
                charArray[i] += (char) 13;
            else if(charArray[i] >= 'n' && charArray[i] <= 'z')
                charArray[i] -= (char) 13;
            else if(charArray[i] >= 'N' && charArray[i] <= 'Z')
                charArray[i] -= (char) 13;
        }
        fjala = String.valueOf(charArray);
        jTextArea2.setText(fjala);
        }
        else if(x == 2){
            //caesar;s cipher to be continued;
        String fjala = jTextArea1.getText();
        char [] charArr = fjala.toCharArray();
        for(int i = 0; i < charArr.length; i++) {
                switch (charArr[i]) {
                    case 'A':
                        charArr[i] = 'X';
                        break;
                    case 'a':
                        charArr[i] = 'x';
                        break;
                    case 'B':
                        charArr[i] = 'Y';
                        break;
                    case 'b':
                        charArr[i] = 'y';
                        break;
                    case 'C':
                        charArr[i] = 'Z';
                        break;
                    case 'c':
                        charArr[i] = 'z';
                        break;
                    default:
                        if (Character.isAlphabetic(charArr[i])) {
                            charArr[i] -= (char) 3;
                        }
                        break;
                    }
                }
                fjala = String.valueOf(charArr);
                jTextArea2.setText(fjala);
        } else if(x == 3){
        //a1z26
        String fjala = jTextArea1.getText();
        char [] charArr = fjala.toCharArray();
        int [] intArr = new int [charArr.length];
        for(int i = 0; i < charArr.length; i++){
                switch (charArr[i]){
                    case 'a':
                        intArr[i] = 1;
                        break;
                    case 'b':
                        intArr[i] = 2;
                        break;
                    case 'c':
                        intArr[i] = 3;
                        break;
                    case 'd':
                        intArr[i] = 4;
                        break;
                    case 'e':
                        intArr[i] = 5;
                        break;
                    case 'f':
                        intArr[i] = 6;
                        break;
                    case 'g':
                        intArr[i] = 7;
                        break;
                    case 'h':
                        intArr[i] = 8;
                        break;
                    case 'i':
                        intArr[i] = 9;
                        break;
                    case 'j':
                        intArr[i] = 10;
                        break;
                    case 'k':
                        intArr[i] = 11;
                        break;
                    case 'l':
                        intArr[i] = 12;
                        break;
                    case 'm':
                        intArr[i] = 13;
                        break;
                    case 'n':
                        intArr[i] = 14;
                        break;
                    case 'o':
                        intArr[i] = 15;
                        break;
                    case 'p':
                        intArr[i] = 16;
                        break;
                    case 'q':
                        intArr[i] = 17;
                        break;
                    case 'r':
                        intArr[i] = 18;
                        break;
                    case 's':
                        intArr[i] = 19;
                        break;
                    case 't':
                        intArr[i] = 20;
                        break;
                    case 'u':
                        intArr[i] = 21;
                        break;
                    case 'v':
                        intArr[i] = 22;
                        break;
                    case 'w':
                        intArr[i] = 23;
                        break;
                    case 'x':
                        intArr[i] = 24;
                        break;
                    case 'y':
                        intArr[i] = 25;
                        break;
                    case 'z':
                        intArr[i] = 26;
                        break;
                    
                }
            }
            String shendrruara = "";
            for(int i = 0; i < intArr.length; i++){
            shendrruara += intArr[i] +" ";
            }
            jTextArea2.setText(shendrruara);
        } else if(x == 4) {
            try{
            String qelesi = jTextArea3.getText();
            byte [] keyValue = qelesi.getBytes();
            Key key = new SecretKeySpec(keyValue, algo);
            Cipher c = Cipher.getInstance(algo);
            c.init(Cipher.ENCRYPT_MODE, key);
            String fjala = jTextArea1.getText();
            byte [] enc = c.doFinal(fjala.getBytes());
            String encryptedValue = new BASE64Encoder().encode(enc);
            jTextArea2.setText(encryptedValue);
            } catch (Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /*
    
    DEKODIMIIIIIIIIIIIIIIIIIIIIIII
    
    */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int x = zgjedhe.getSelectedIndex();
        if(x == 1){
        String kodi = jTextArea2.getText();
        char [] charArray = kodi.toCharArray();
        for(int i = 0; i < kodi.length(); i++){
            if(charArray[i] >= 'a' && charArray[i] <= 'm')
                charArray[i] += (char) 13;
            else if(charArray[i] >= 'A' && charArray[i] <= 'M')
                charArray[i] += (char) 13;
            else if(charArray[i] >= 'n' && charArray[i] <= 'z')
                charArray[i] -= (char) 13;
            else if(charArray[i] >= 'N' && charArray[i] <= 'Z')
                charArray[i] -= (char) 13;
        }
        kodi = String.valueOf(charArray);
        jTextArea1.setText(kodi);
        }
        else if(x == 2){
            //caesar's cipher decoding to be continued;
        String kodi = jTextArea2.getText();
        char [] charArr = kodi.toCharArray();
        for(int i = 0; i < charArr.length; i++) {
                switch (charArr[i]) {
                    case 'X':
                        charArr[i] = 'A';
                        break;
                    case 'x':
                        charArr[i] = 'a';
                        break;
                    case 'Y':
                        charArr[i] = 'B';
                        break;
                    case 'y':
                        charArr[i] = 'b';
                        break;
                    case 'Z':
                        charArr[i] = 'C';
                        break;
                    case 'z':
                        charArr[i] = 'c';
                        break;
                    default:
                        if (Character.isAlphabetic(charArr[i])) {
                            charArr[i] += (char) 3;
                        }
                        break;
                    }
                }
                kodi = String.valueOf(charArr);
                jTextArea1.setText(kodi);
        }
        else if (x == 3){
        //A1Z26 decoding;
        String kodi = jTextArea2.getText();
        String [] shkronjat = kodi.split(" ");
        //int [] intArr = new int [charArr.length];
        String [] stringArr = new String [shkronjat.length];
        for(int i = 0; i < shkronjat.length; i++){
                switch (shkronjat[i]){
                    case "1":
                        stringArr[i] = "a";
                        break;
                    case "2":
                        stringArr[i] = "b";
                        break;
                    case "3":
                        stringArr[i] = "c";
                        break;
                    case "4":
                        stringArr[i] = "d";
                        break;
                    case "5":
                        stringArr[i] = "e";
                        break;
                    case "6":
                        stringArr[i] = "f";
                        break;
                    case "7":
                        stringArr[i] = "g";
                        break;
                    case "8":
                        stringArr[i] = "h";
                        break;
                    case "9":
                        stringArr[i] = "i";
                        break;
                    case "10":
                        stringArr[i] = "j";
                        break;
                    case "11":
                        stringArr[i] = "k";
                        break;
                    case "12":
                        stringArr[i] = "l";
                        break;
                    case "13":
                        stringArr[i] = "m";
                        break;
                    case "14":
                        stringArr[i] = "n";
                        break;
                    case "15":
                        stringArr[i] = "o";
                        break;
                    case "16":
                        stringArr[i] = "p";
                        break;
                    case "17":
                        stringArr[i] = "q";
                        break;
                    case "18":
                        stringArr[i] = "r";
                        break;
                    case "19":
                        stringArr[i] = "s";
                        break;
                    case "20":
                        stringArr[i] = "t";
                        break;
                    case "21":
                        stringArr[i] = "u";
                        break;
                    case "22":
                        stringArr[i] = "v";
                        break;
                    case "23":
                        stringArr[i] = "w";
                        break;
                    case "24":
                        stringArr[i] = "x";
                        break;
                    case "25":
                        stringArr[i] = "y";
                        break;
                    case "26":
                        stringArr[i] = "z";
                        break;
                    
                }
            }
            String dekoduara = "";
            for(int i = 0; i < stringArr.length; i++){
                if(stringArr[i] != null){
                    dekoduara += stringArr[i];
                }
            }
            jTextArea1.setText(dekoduara);
        }  else if(x == 4) {
            try{
            String qelesi = jTextArea3.getText();
            byte [] keyValue = qelesi.getBytes();
            Key key = new SecretKeySpec(keyValue, algo);
            Cipher c = Cipher.getInstance(algo);
            c.init(Cipher.DECRYPT_MODE, key);
            String fjala = jTextArea2.getText();
            byte [] dec = new BASE64Decoder().decodeBuffer(fjala);
            byte [] decVal = c.doFinal(dec);
            String decryptedVal = new String(decVal);
            jTextArea1.setText(decryptedVal);
            } catch (Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        jTextArea2.setText("");
        jTextArea3.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void zgjedheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zgjedheActionPerformed
        // TODO add your handling code here:
         
        int x = zgjedhe.getSelectedIndex();
        if(x == 0){
            
            jLabel3.setVisible(false);
            jTextArea3.setVisible(false);
            
            jTextArea1.setText("");
            jTextArea2.setText("");
            jLabel2.setText("Algoritmi per enkodim (zgjedhe)");
           
        }
        else if(x == 1){
            
            jLabel3.setVisible(false);
            jTextArea3.setVisible(false);
            jTextArea1.setText("");
            jTextArea2.setText("");
            jLabel2.setText("ROT13");
        }
        else if(x == 2){
            
            jLabel3.setVisible(false);
            jTextArea3.setVisible(false);
            jTextArea1.setText("");
            jTextArea2.setText("");
            jLabel2.setText("Caesar's Cipher");
        }
        else if(x == 3){
            
            jLabel3.setVisible(false);
            jTextArea3.setVisible(false);
            jTextArea1.setText("");
            jTextArea2.setText("");
            JOptionPane.showMessageDialog(null, "Kodim: Shkruaj me shkronja te vogla"
                                             +"\nDekodim: Shkruaj numra prej 1-26 dhe ndaj me space");
            jLabel2.setText("A1Z26");
        }
        else if(x == 4){
            jTextArea1.setText("");
            jTextArea2.setText("");
            JOptionPane.showMessageDialog(null, "Kujdes: \n" +
                                                        "\n" +
                                                        "AES256: shtyp celes 32 karakteresh\n" +
                                                        "\n" +
                                                        "AES192: shtyp celes 24 karakteresh\n" +
                                                        "\n" +
                                                        "AES128: shtyp celes 16 karakteresh");
            jLabel3.setVisible(true);
            jTextArea3.setVisible(true);
            jTextArea1.setText("");
            jTextArea2.setText("");
            jLabel2.setText("AES265");
        }
    }//GEN-LAST:event_zgjedheActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JComboBox<String> zgjedhe;
    // End of variables declaration//GEN-END:variables
}